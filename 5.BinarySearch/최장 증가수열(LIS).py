'''

https://shoark7.github.io/programming/algorithm/3-LIS-algorithms

꼬인 전깃줄 풀다가 한계를 맛보고 찾아봄.

LIS는 어떤 수열에서 특정 부분을 지워서 만들어 낼 수 있는 증가 부분수열 중 가장 긴 수열. 이때 부분 수열의 숫자들은 원 배열에서 위치가 이어져 있지 않아도 된다는 주요 특징이 있음.

보통 증가는 순증가와 단조증가로 나눌 수 있다.

순증가는 1,2,3, 처럼 뒤의 숫자가 앞의 숫자보다 무조건 큰 경우
단조 증가는 1,2,2,3,처럼 앞 숫자보다 이상일 경우.

단조 증가 수열의 대표적인 예가 피보나치 수열. 처음에 1이 두번나옴.

LIS는 보통 순증가하는 부분수열을 대상으로 한다.

이 함수는 완전탐색답게 모든 증가 부분수열을 고려한다. 함수는 배열을 받아 원 배열에서 증가 부분수열의 첫 수를 선택하고, 그 다음 수가
될 수 있는, 위의 두 명제처럼 첫 수보다 원 배열에서 뒤에 있고 큰 후보값들의 배열을 추려 재귀해나가면 될 것 같다. 재귀가 가능한 것은
숫자를 하나 선택할 때마다 같은 과정을 진행할 수 있기 때문이다.

이때 증가수열이 생성되면서, 다시 말해 재귀함수가 진행되면서 내 앞의 숫자가 어떤 숫자였는지는 중요하지 않다. 이미 내가 선택되었다는 것은
그 이전의 숫자가 나보다는 작은 숫자라는 것을 말해주고, 또 여기서는 길이만 구하기 때문에 앞선 콜에서 이전값의 길이 1만을 계속
더해나가면 되기 때문이다.

'''